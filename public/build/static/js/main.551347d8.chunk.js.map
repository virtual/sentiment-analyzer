{"version":3,"sources":["FormLyrics.js","Shape.js","ArtCanvas.js","App.js","reportWebVitals.js","index.js"],"names":["axios","require","FormLyrics","props","handleSubmit","bind","event","saValue","this","wordsInput","method","url","data","lyrics","then","response","console","log","updateSA","error","preventDefault","className","sentiment","onSubmit","action","rows","type","value","onChange","onWordsChange","Component","synth","Tone","toDestination","Shape","handleSVGClick","randomizeXPos","randomizeYPos","playNote","shape","x","window","innerHeight","Math","random","y","innerWidth","notes","floor","length","key","note","triggerAttackRelease","filepath","xPos","yPos","size","String","delay","parseInt","counter","style","top","left","onClick","height","width","animationDelay","src","alt","ArtCanvas","nextProps","nextState","shapeWords","shapes","allowedShapes","html","forEach","element","count","match","RegExp","i","push","backgroundColor","bgHue","App","state","createHSLValue","setState","target","val","parseFloat","valp","abs","intensity","isFinite","pct","toFixed","newHSL","saPct","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.551347d8.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport \"./FormLyrics.css\";\nconst axios = require('axios')\nclass FormLyrics extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    var saValue = '';\n    if (this.props.wordsInput !== '') {\n      try {\n        axios({\n          method: 'post',\n          url: '/post',\n          data: {\n            lyrics: this.props.wordsInput\n          }\n        })\n        .then((response) => {\n          console.log(response.data);\n          saValue = response.data;\n          this.props.updateSA(saValue)\n        }, (error) => {\n          console.log(error);\n        });\n      } catch (error) {\n        console.error(error)\n      }\n    }\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"wordsForm\">\n        <h2>Sentiment: {this.props.sentiment}</h2>\n        <form onSubmit={this.handleSubmit}  action=\"../../post\" method=\"post\">\n          <label>\n            <small>Words:</small>\n            <br/>\n            <textarea rows=\"10\" type=\"text\" value={this.props.wordsInput} onChange={this.props.onWordsChange} />\n          </label>\n          <br/>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\nexport default FormLyrics;","import React, {Component} from 'react';\nimport * as Tone from 'tone';\nconst synth = new Tone.Synth().toDestination();\n// import \"./Shape.css\";\nclass Shape extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSVGClick = this.handleSVGClick.bind(this);\n    this.randomizeXPos = this.randomizeXPos.bind(this);\n    this.randomizeYPos = this.randomizeYPos.bind(this);\n    this.playNote = this.playNote.bind(this);\n  }\n\n  handleSVGClick(event) {\n    if (this.props.wordsInput !== '') {\n      console.log('something about '+this.props.shape+' svgs')\n    }\n    event.preventDefault();\n  }\n\n  randomizeXPos() {\n    let imgHeight = 20;\n    let x = window.innerHeight - imgHeight;\n    x = Math.random() * x;\n    return x;\n  }\n  randomizeYPos() {\n    let imgHeight = 20;\n    let y = window.innerWidth - imgHeight;\n    y = Math.random() * y;\n    return y;\n  }\n\n  playNote() {\n    const notes = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"];\n    const random = Math.floor(Math.random() * notes.length);\n    const key = Math.floor(Math.random() * 4) + 2;\n    let note = notes[random] + key; \n    synth.triggerAttackRelease(note, \"8n\");\n  }\n\n  render() {\n    var filepath = './'+this.props.shape+'.svg';\n    let xPos = this.randomizeXPos();\n    let yPos = this.randomizeYPos();\n    let size = String(Math.random() * 40) + 'px';\n    let delay = String(.3 * parseInt(this.props.counter)) + 's';\n    return (\n      <div style={{top: xPos, left: yPos}} className=\"shape\" onClick={this.playNote}>\n        <img style={{height: size, width: size, animationDelay: delay}} onClick={this.handleSVGClick} src={filepath} alt={filepath}/>\n      </div>\n    );\n  }\n}\nexport default Shape;","import React, {Component} from 'react';\nimport \"./ArtCanvas.css\";\nimport Shape from './Shape';\n\nclass ArtCanvas extends Component {\n  // constructor(props) {\n  //   super(props);\n\n  //   // this.handleSVGClick = this.handleSVGClick.bind(this);\n  //   // this.randomizeSVG = this.randomizeSVG.bind(this);\n    \n  // }\n\n  // handleSVGClick(event) {\n  //   if (this.props.wordsInput !== '') {\n  //     console.log('something about svgs')\n  //   }\n  //   event.preventDefault();\n  // }\n\n  // randomizeSVG() {\n  //   let imgHeight = 20;\n  //   let x = window.innerHeight - imgHeight;\n  //   x = Math.random() * x;\n  //   return x;\n  // }\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.wordsInput === nextProps.shapeWords) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    const shapes = this.props.allowedShapes;\n    let html = [];\n    let counter = 0;\n    shapes.forEach(element => {\n      let count = ((this.props.wordsInput.match(new RegExp(element, \"g\")) || []).length); //logs 4\n      for (var i = 0; i < count; i++){\n        html.push(<Shape key={Math.random()} shape={element} counter={counter} />);\n        counter++;\n      }\n    });\n    return (\n      <div className=\"artCanvas\" style={{backgroundColor: this.props.bgHue}}>\n        {html}\n      </div>\n    );\n  }\n}\nexport default ArtCanvas;","import React, {Component} from 'react';\nimport \"./App.css\";\nimport FormLyrics from './FormLyrics';\nimport ArtCanvas from './ArtCanvas';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wordsInput: '',\n      sentiment: '0',\n      bgHue: 'hsl(161, 17%, 88%)',\n      shapeWords: ''\n    };\n\n    this.onWordsChange = this.onWordsChange.bind(this);\n    this.updateSA = this.updateSA.bind(this);\n    this.createHSLValue = this.createHSLValue.bind(this);\n  }\n  \n  onWordsChange(event) {\n    this.setState({wordsInput: event.target.value});\n  }\n\n  createHSLValue(saValue) {\n    const val = parseFloat(saValue);\n    const valp = Math.abs(val/3);\n    let intensity = val !== 0 ? Math.abs(1/(Math.log(Math.abs(val/3)))) : .17;\n    if (!(isFinite(intensity))) { intensity = 1; }\n    console.log(val, valp, intensity)\n    var pct = Math.abs(intensity*100).toFixed(1) + \"%\";\n    if (val > 0) {\n      return `hsl(212, ${pct}, 82%)`\n    } else if (val < 0) {\n      return `hsl(0, ${pct}, 90%)`\n    } else {\n      return `hsl(161, ${pct}, 88%)`\n    }\n  }\n\n  updateSA(saValue) {\n    let newHSL = this.createHSLValue(saValue);\n\n    this.setState({\n      sentiment: saValue,\n      bgHue: newHSL,\n      shapeWords: this.state.wordsInput\n    });\n  }\n\n  render() {\n    var saPct = (this.state.sentiment*100).toFixed(1) + \"%\";\n    var allowedShapes = ['star', 'circle']\n    return (\n      <div className=\"App\">\n        <ArtCanvas\n          allowedShapes={allowedShapes}\n          bgHue={this.state.bgHue}\n          wordsInput={this.state.wordsInput}\n          shapeWords={this.state.shapeWords}\n          />\n            \n        <header className=\"App-header\">\n          <h1>Sentiment Analyzer</h1>\n        </header>\n        <main>\n          <FormLyrics \n            wordsInput={this.state.wordsInput}\n            sentiment={saPct}\n            onWordsChange={this.onWordsChange} \n            updateSA={this.updateSA}\n            />\n            \n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}