{"version":3,"sources":["FormLyrics.js","App.js","reportWebVitals.js","index.js"],"names":["axios","require","FormLyrics","props","state","value","sentiment","handleChange","bind","handleSubmit","updateSA","event","this","setState","target","saValue","method","url","data","lyrics","then","response","console","log","error","preventDefault","onSubmit","action","rows","type","onChange","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPACMA,EAAQC,EAAQ,IAqEPC,E,kDAnEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,GACPC,UAAW,KAGb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBATC,E,gDAYnB,SAAaG,GACXC,KAAKC,SAAS,CAACR,MAAOM,EAAMG,OAAOT,U,sBAGrC,SAASU,GACPH,KAAKC,SAAS,CAACP,UAAWS,M,0BAG5B,SAAaJ,GAAQ,IAAD,OACdI,EAAU,GACd,IAIEf,EAAM,CACJgB,OAAQ,OACRC,IAAK,QACLC,KAAM,CACJC,OAAQP,KAAKR,MAAMC,SAGtBe,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAASH,MACrBH,EAAUM,EAASH,KACnB,EAAKR,SAASK,MACb,SAACS,GACFF,QAAQC,IAAIC,MAEd,MAAOA,GACPF,QAAQE,MAAMA,GAKhBb,EAAMc,mB,oBAGR,WACE,OACE,8CACcb,KAAKR,MAAME,UACvB,uBAAMoB,SAAUd,KAAKH,aAAekB,OAAO,aAAaX,OAAO,OAA/D,UACE,kCACE,2CACA,uBACA,0BAAUY,KAAK,KAAKC,KAAK,OAAOxB,MAAOO,KAAKR,MAAMC,MAAOyB,SAAUlB,KAAKL,kBAE1E,uBACA,uBAAOsB,KAAK,SAASxB,MAAM,cAE7B,wF,GA/DiB0B,aCgBVC,MAdf,WACA,OACC,sBAAKC,UAAU,MAAf,UACA,wBAAQA,UAAU,aAAlB,SACC,qDAEA,+BAEE,cAAC,EAAD,UCAWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.25a405f7.chunk.js","sourcesContent":["import React, {Component} from 'react';\nconst axios = require('axios')\nclass FormLyrics extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      sentiment: '0'\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.updateSA = this.updateSA.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  updateSA(saValue) {\n    this.setState({sentiment: saValue});\n  }\n\n  handleSubmit(event) {\n    var saValue = '';\n    try {\n      // axios.post('/post', {\n      //   body: this.state.value\n      // })\n      axios({\n        method: 'post',\n        url: '/post',\n        data: {\n          lyrics: this.state.value\n        }\n      })\n      .then((response) => {\n        console.log(response.data);\n        saValue = response.data;\n        this.updateSA(saValue)\n      }, (error) => {\n        console.log(error);\n      });\n    } catch (error) {\n      console.error(error)\n    }\n    // alert('A name was submitted: ' + );\n    // console.log(data)\n    // this.setState({sentiment: 'arf'+saValue});\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div>\n        Sentiment: {this.state.sentiment}\n        <form onSubmit={this.handleSubmit}  action=\"../../post\" method=\"post\">\n          <label>\n            <small>Words:</small>\n            <br/>\n            <textarea rows=\"10\" type=\"text\" value={this.state.value} onChange={this.handleChange} />\n          </label>\n          <br/>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        <p>Positive numbers are happy; negative are unhappy</p>\n      </div>\n    );\n  }\n}\nexport default FormLyrics;","import \"./App.css\";\nimport FormLyrics from './FormLyrics';\n// import { text } from \"express\";\n\nfunction App() {\nreturn (\n\t<div className=\"App\">\n\t<header className=\"App-header\">\n  <p>Sentiment Analyzer</p>\n\t</header>\n  <main>\n\n    <FormLyrics />\n  </main>\n\t</div>\n);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}