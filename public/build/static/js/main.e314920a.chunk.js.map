{"version":3,"sources":["FormLyrics.js","App.js","reportWebVitals.js","index.js"],"names":["axios","require","FormLyrics","props","handleSubmit","bind","event","saValue","this","wordsInput","method","url","data","lyrics","then","response","console","log","updateSA","error","preventDefault","className","sentiment","onSubmit","action","rows","type","value","onChange","onWordsChange","Component","App","state","bgHue","createHSLValue","setState","target","val","parseFloat","valp","Math","abs","intensity","isFinite","pct","toFixed","newHSL","saPct","style","backgroundColor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAEMA,EAAQC,EAAQ,IAkDPC,E,kDAhDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,aAAe,EAAKA,aAAaC,KAAlB,gBAHH,E,gDAMnB,SAAaC,GAAQ,IAAD,OACdC,EAAU,GACd,GAA8B,KAA1BC,KAAKL,MAAMM,WACb,IACET,EAAM,CACJU,OAAQ,OACRC,IAAK,QACLC,KAAM,CACJC,OAAQL,KAAKL,MAAMM,cAGtBK,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAASH,MACrBL,EAAUQ,EAASH,KACnB,EAAKT,MAAMe,SAASX,MACnB,SAACY,GACFH,QAAQC,IAAIE,MAEd,MAAOA,GACPH,QAAQG,MAAMA,GAGlBb,EAAMc,mB,oBAGR,WACE,OACE,sBAAKC,UAAU,YAAf,UACE,6CAAgBb,KAAKL,MAAMmB,aAC3B,uBAAMC,SAAUf,KAAKJ,aAAeoB,OAAO,aAAad,OAAO,OAA/D,UACE,kCACE,2CACA,uBACA,0BAAUe,KAAK,KAAKC,KAAK,OAAOC,MAAOnB,KAAKL,MAAMM,WAAYmB,SAAUpB,KAAKL,MAAM0B,mBAErF,uBACA,uBAAOH,KAAK,SAASC,MAAM,qB,GA3CZG,aCiEVC,E,kDA/Db,WAAY5B,GAAQ,IAAD,8BACjB,cAAMA,IACD6B,MAAQ,CACXvB,WAAY,GACZa,UAAW,IACXW,MAAO,sBAGT,EAAKJ,cAAgB,EAAKA,cAAcxB,KAAnB,gBACrB,EAAKa,SAAW,EAAKA,SAASb,KAAd,gBAChB,EAAK6B,eAAiB,EAAKA,eAAe7B,KAApB,gBAVL,E,iDAanB,SAAcC,GACZE,KAAK2B,SAAS,CAAC1B,WAAYH,EAAM8B,OAAOT,U,4BAG1C,SAAepB,GACb,IAAM8B,EAAMC,WAAW/B,GACjBgC,EAAOC,KAAKC,IAAIJ,EAAI,GACtBK,EAAoB,IAARL,EAAYG,KAAKC,IAAI,EAAGD,KAAKvB,IAAIuB,KAAKC,IAAIJ,EAAI,KAAQ,IAChEM,SAASD,KAAeA,EAAY,GAC1C1B,QAAQC,IAAIoB,EAAKE,EAAMG,GACvB,IAAIE,EAAMJ,KAAKC,IAAc,IAAVC,GAAeG,QAAQ,GAAK,IAC/C,OAAIR,EAAM,EACF,YAAN,OAAmBO,EAAnB,UACSP,EAAM,EACT,UAAN,OAAiBO,EAAjB,UAEM,YAAN,OAAmBA,EAAnB,Y,sBAIJ,SAASrC,GACP,IAAIuC,EAAStC,KAAK0B,eAAe3B,GAEjCC,KAAK2B,SAAS,CACZb,UAAWf,EACX0B,MAAOa,M,oBAIX,WACE,IAAIC,GAA8B,IAArBvC,KAAKwB,MAAMV,WAAeuB,QAAQ,GAAK,IAEpD,OACE,sBAAKxB,UAAU,MAAM2B,MAAO,CAACC,gBAAiBzC,KAAKwB,MAAMC,OAAzD,UACE,wBAAQZ,UAAU,aAAlB,SACE,sDAEF,+BACE,cAAC,EAAD,CACEZ,WAAYD,KAAKwB,MAAMvB,WACvBa,UAAWyB,EACXlB,cAAerB,KAAKqB,cACpBX,SAAUV,KAAKU,oB,GAxDTY,aCQHoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e314920a.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport \"./FormLyrics.css\";\nconst axios = require('axios')\nclass FormLyrics extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    var saValue = '';\n    if (this.props.wordsInput !== '') {\n      try {\n        axios({\n          method: 'post',\n          url: '/post',\n          data: {\n            lyrics: this.props.wordsInput\n          }\n        })\n        .then((response) => {\n          console.log(response.data);\n          saValue = response.data;\n          this.props.updateSA(saValue)\n        }, (error) => {\n          console.log(error);\n        });\n      } catch (error) {\n        console.error(error)\n      }\n    }\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"wordsForm\">\n        <h2>Sentiment: {this.props.sentiment}</h2>\n        <form onSubmit={this.handleSubmit}  action=\"../../post\" method=\"post\">\n          <label>\n            <small>Words:</small>\n            <br/>\n            <textarea rows=\"10\" type=\"text\" value={this.props.wordsInput} onChange={this.props.onWordsChange} />\n          </label>\n          <br/>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\nexport default FormLyrics;","import React, {Component} from 'react';\nimport \"./App.css\";\nimport FormLyrics from './FormLyrics';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wordsInput: '',\n      sentiment: '0',\n      bgHue: 'hsl(161, 17%, 88%)'\n    };\n\n    this.onWordsChange = this.onWordsChange.bind(this);\n    this.updateSA = this.updateSA.bind(this);\n    this.createHSLValue = this.createHSLValue.bind(this);\n  }\n  \n  onWordsChange(event) {\n    this.setState({wordsInput: event.target.value});\n  }\n\n  createHSLValue(saValue) {\n    const val = parseFloat(saValue);\n    const valp = Math.abs(val/3);\n    let intensity = val !== 0 ? Math.abs(1/(Math.log(Math.abs(val/3)))) : .17;\n    if (!(isFinite(intensity))) { intensity = 1; }\n    console.log(val, valp, intensity)\n    var pct = Math.abs(intensity*100).toFixed(1) + \"%\";\n    if (val > 0) {\n      return `hsl(212, ${pct}, 82%)`\n    } else if (val < 0) {\n      return `hsl(0, ${pct}, 90%)`\n    } else {\n      return `hsl(161, ${pct}, 88%)`\n    }\n  }\n\n  updateSA(saValue) {\n    let newHSL = this.createHSLValue(saValue);\n\n    this.setState({\n      sentiment: saValue,\n      bgHue: newHSL\n    });\n  }\n\n  render() {\n    var saPct = (this.state.sentiment*100).toFixed(1) + \"%\";\n\n    return (\n      <div className=\"App\" style={{backgroundColor: this.state.bgHue}}>\n        <header className=\"App-header\">\n          <h1>Sentiment Analyzer</h1>\n        </header>\n        <main>\n          <FormLyrics \n            wordsInput={this.state.wordsInput}\n            sentiment={saPct}\n            onWordsChange={this.onWordsChange} \n            updateSA={this.updateSA}\n            />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}