{"version":3,"sources":["FormLyrics.js","Shape.js","ArtCanvas.js","App.js","reportWebVitals.js","index.js"],"names":["axios","require","FormLyrics","props","handleSubmit","bind","event","saValue","this","wordsInput","method","url","data","lyrics","then","response","console","log","updateSA","error","preventDefault","className","sentiment","onSubmit","action","rows","type","value","onChange","onWordsChange","Component","Shape","handleSVGClick","randomizeXPos","randomizeYPos","shape","x","window","innerHeight","Math","random","y","innerWidth","filepath","xPos","yPos","style","top","left","onClick","src","alt","ArtCanvas","shapes","allowedShapes","html","forEach","element","count","match","RegExp","length","i","push","backgroundColor","bgHue","App","state","createHSLValue","setState","target","val","parseFloat","valp","abs","intensity","isFinite","pct","toFixed","newHSL","saPct","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6c1a925.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport \"./FormLyrics.css\";\nconst axios = require('axios')\nclass FormLyrics extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    var saValue = '';\n    if (this.props.wordsInput !== '') {\n      try {\n        axios({\n          method: 'post',\n          url: '/post',\n          data: {\n            lyrics: this.props.wordsInput\n          }\n        })\n        .then((response) => {\n          console.log(response.data);\n          saValue = response.data;\n          this.props.updateSA(saValue)\n        }, (error) => {\n          console.log(error);\n        });\n      } catch (error) {\n        console.error(error)\n      }\n    }\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"wordsForm\">\n        <h2>Sentiment: {this.props.sentiment}</h2>\n        <form onSubmit={this.handleSubmit}  action=\"../../post\" method=\"post\">\n          <label>\n            <small>Words:</small>\n            <br/>\n            <textarea rows=\"10\" type=\"text\" value={this.props.wordsInput} onChange={this.props.onWordsChange} />\n          </label>\n          <br/>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\nexport default FormLyrics;","import React, {Component} from 'react';\n// import \"./Shape.css\";\nclass Shape extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSVGClick = this.handleSVGClick.bind(this);\n    this.randomizeXPos = this.randomizeXPos.bind(this);\n    this.randomizeYPos = this.randomizeYPos.bind(this);\n  }\n\n  handleSVGClick(event) {\n    if (this.props.wordsInput !== '') {\n      console.log('something about '+this.props.shape+' svgs')\n    }\n    event.preventDefault();\n  }\n\n  randomizeXPos() {\n    let imgHeight = 20;\n    let x = window.innerHeight - imgHeight;\n    x = Math.random() * x;\n    return x;\n  }\n  randomizeYPos() {\n    let imgHeight = 20;\n    let y = window.innerWidth - imgHeight;\n    y = Math.random() * y;\n    return y;\n  }\n\n  render() {\n    var filepath = './'+this.props.shape+'.svg';\n    let xPos = this.randomizeXPos();\n    let yPos = this.randomizeYPos();\n    return (\n      <div className=\"shape\">\n        <img style={{top: xPos, left: yPos}} onClick={this.handleSVGClick} src={filepath} alt={filepath}/>\n      </div>\n    );\n  }\n}\nexport default Shape;","import React, {Component} from 'react';\nimport \"./ArtCanvas.css\";\nimport Shape from './Shape';\n\nclass ArtCanvas extends Component {\n  // constructor(props) {\n  //   super(props);\n\n  //   // this.handleSVGClick = this.handleSVGClick.bind(this);\n  //   // this.randomizeSVG = this.randomizeSVG.bind(this);\n    \n  // }\n\n  // handleSVGClick(event) {\n  //   if (this.props.wordsInput !== '') {\n  //     console.log('something about svgs')\n  //   }\n  //   event.preventDefault();\n  // }\n\n  // randomizeSVG() {\n  //   let imgHeight = 20;\n  //   let x = window.innerHeight - imgHeight;\n  //   x = Math.random() * x;\n  //   return x;\n  // }\n\n  render() {\n    const shapes = this.props.allowedShapes;\n    let html = [];\n    shapes.forEach(element => {\n      let count = ((this.props.wordsInput.match(new RegExp(element, \"g\")) || []).length); //logs 4\n      for (var i = 0; i < count; i++){\n        html.push(<Shape shape={element} key={Math.random()} />);\n      }\n    });\n    return (\n      <div className=\"artCanvas\" style={{backgroundColor: this.props.bgHue}}>\n{html}\n        \n      </div>\n    );\n  }\n}\nexport default ArtCanvas;","import React, {Component} from 'react';\nimport \"./App.css\";\nimport FormLyrics from './FormLyrics';\nimport ArtCanvas from './ArtCanvas';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wordsInput: '',\n      sentiment: '0',\n      bgHue: 'hsl(161, 17%, 88%)'\n    };\n\n    this.onWordsChange = this.onWordsChange.bind(this);\n    this.updateSA = this.updateSA.bind(this);\n    this.createHSLValue = this.createHSLValue.bind(this);\n  }\n  \n  onWordsChange(event) {\n    this.setState({wordsInput: event.target.value});\n  }\n\n  createHSLValue(saValue) {\n    const val = parseFloat(saValue);\n    const valp = Math.abs(val/3);\n    let intensity = val !== 0 ? Math.abs(1/(Math.log(Math.abs(val/3)))) : .17;\n    if (!(isFinite(intensity))) { intensity = 1; }\n    console.log(val, valp, intensity)\n    var pct = Math.abs(intensity*100).toFixed(1) + \"%\";\n    if (val > 0) {\n      return `hsl(212, ${pct}, 82%)`\n    } else if (val < 0) {\n      return `hsl(0, ${pct}, 90%)`\n    } else {\n      return `hsl(161, ${pct}, 88%)`\n    }\n  }\n\n  updateSA(saValue) {\n    let newHSL = this.createHSLValue(saValue);\n\n    this.setState({\n      sentiment: saValue,\n      bgHue: newHSL\n    });\n  }\n\n  render() {\n    var saPct = (this.state.sentiment*100).toFixed(1) + \"%\";\n    var allowedShapes = ['star', 'circle']\n    return (\n      <div className=\"App\">\n        <ArtCanvas\n        allowedShapes={allowedShapes}\n        bgHue={this.state.bgHue}\n            wordsInput={this.state.wordsInput}\n            />\n        <header className=\"App-header\">\n          <h1>Sentiment Analyzer</h1>\n        </header>\n        <main >\n          <FormLyrics \n            wordsInput={this.state.wordsInput}\n            sentiment={saPct}\n            onWordsChange={this.onWordsChange} \n            updateSA={this.updateSA}\n            />\n            \n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}